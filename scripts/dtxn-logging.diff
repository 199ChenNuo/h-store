diff --git a/protodtxn/protodtxncoordinator.cc b/protodtxn/protodtxncoordinator.cc
--- a/protodtxn/protodtxncoordinator.cc
+++ b/protodtxn/protodtxncoordinator.cc
@@ -72,6 +72,8 @@
         }
         response_->set_transaction_id(id_);
         response_->set_status((FragmentResponse::Status) transaction_->status());
+        printf("coord returning results txn: %d; num fragments: %d status: %d\n",
+                response_->transaction_id(), response_->response_size(), response_->status());
 
         transaction_->readyNextRound();
 
@@ -120,6 +122,7 @@
     CHECK(request->fragment_size() > 0);
     assert(!response->IsInitialized());
 
+    printf("coord execute txn: %d; num fragments: %d last_fragment? %d\n", request->transaction_id(), request->fragment_size(), request->last_fragment());
     // TODO: Check that transaction ids are increasing or otherwise unique?
     ProtoDtxnCoordinatorRequest* state = NULL;
     TransactionMap::iterator it = transactions_.find(request->transaction_id());
@@ -158,6 +161,7 @@
     CHECK(it != transactions_.end());
     ProtoDtxnCoordinatorRequest* state = it->second;
 
+    printf("coord finish txn: %d; commit? %d; multiple partitions? %d\n", request->transaction_id(), request->commit(), state->transaction()->multiple_partitions());
     if (state->transaction()->multiple_partitions() &&
             state->transaction()->status() == DistributedTransaction::OK) {
         state->setFinish(done);
diff --git a/protodtxn/protodtxnengine.cc b/protodtxn/protodtxnengine.cc
--- a/protodtxn/protodtxnengine.cc
+++ b/protodtxn/protodtxnengine.cc
@@ -46,6 +46,8 @@
             NewCallback(this, &ProtoDtxnEngine::responseArrived));
     event_loop_->run();
     CHECK(!request_active_);
+    printf("engine executed txn %d undoable? %d bytes out: %d\n", transaction_id,
+            request.undoable(), response.output().size());
 
     output->assign(response.output());
     return static_cast<dtxn::ExecutionEngine::Status>(response.status());
@@ -76,6 +78,7 @@
             NewCallback(this, &ProtoDtxnEngine::responseArrived));
     event_loop_->run();
     CHECK(!request_active_);
+    printf("engine finished txn %d commit? %d\n", transaction_id, commit);
 }
 
 void ProtoDtxnEngine::responseArrived() {
