package edu.brown.benchmark.auctionmark.util;

public class UserId {
    
    private static final int MAX_VALUE = 65535; // 2^14 - 1
    private static final int VALUE_OFFSET = 16;

    private final int size_index;
    private final long size_offset;
    
    private transient int hashCode = -1;

    /**
     * Constructor
     * @param size_index
     * @param size_offset
     */
    public UserId(int size_index, long size_offset) {
        this.size_index = size_index;
        this.size_offset = size_offset;
    }
    
    /**
     * Constructor
     * Converts a composite id generated by encode() into the full object
     * @param composite_id
     */
    public UserId(long composite_id) {
        long values[] = UserId.decode(composite_id);
        this.size_index = (int)values[0];
        this.size_offset = values[1];
    }
    
    public long encode() {
        return UserId.encode(new long[]{ this.size_index, this.size_offset});
    }

    public static long encode(long...values) {
        assert(values.length == 4);
        for (int i = 0; i < values.length; i++) {
            assert(values[i] >= 0) : "UserId value at position " + i + " is " + values[i];
            assert(values[i] < MAX_VALUE) : "UserId value at position " + i + " is " + values[i] + ". Max value is " + MAX_VALUE;
        } // FOR
        
        long id = values[0];
        int offset = VALUE_OFFSET;
        // System.out.println("0: " + id);
        for (int i = 1; i < values.length; i++) {
            id = id | values[i]<<offset;
            // System.out.println(id + ": " + id + "  [offset=" + offset + ", value=" + values[i] + "]");
            offset += VALUE_OFFSET;
        }
        return (id);
    }
    
    public static long[] decode(long composite_id) {
        long values[] = new long[4];
        int offset = 0;
        for (int i = 0; i < values.length; i++) {
            values[i] = composite_id>>offset & MAX_VALUE;
            offset += VALUE_OFFSET;
        } // FOR
        return (values);
    }
    
    @Override
    public String toString() {
        return String.format("UserId{index=%d,offset=%d}",
                             this.size_index, this.size_offset);
    }
    
    @Override
    public boolean equals(Object obj) {
        if (obj instanceof UserId) {
            UserId o = (UserId)obj;
            return (this.size_index == o.size_index &&
                    this.size_offset == o.size_offset);
        }
        return (false);
    }
    
    @Override
    public int hashCode() {
        if (this.hashCode == -1) {
            this.hashCode = new Long(this.encode()).hashCode();
        }
        return (this.hashCode);
    }
    
}
